[
  {
    "objectID": "posts/Blog1/index.html",
    "href": "posts/Blog1/index.html",
    "title": "Heart Disease Classification and Prediction using KNN Model",
    "section": "",
    "text": "In this blog post, our focus will be on delving into a machine-learning project that revolves around predicting heart disease through KNN classification. The journey begins with a comprehensive understanding of the dataset, followed by visualizing key features and normalizing the data. The dataset encompasses information such as gender, age, blood pressure, sugar, and more. Subsequently, we will proceed to train and evaluate a KNN classification model to predict heart disease through machine learning.\n\nImporting Libraries\nThis segment imports essential libraries for data manipulation, visualization, and machine learning.\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport os\n\n\n\nExploring Dataset and Visualization\nIn this segment, the dataset is explored first. Then it is examined through the calculation and display of the count and percentage of patients with and without heart disease, as well as the percentage of male and female patients. Additionally, it includes visualizations depicting the count of patients with and without heart disease, along with the count of male and female patients.\n\ndf = pd.read_csv(\"heart_Disease.csv\")\ndf.target.value_counts()\n\ntarget\n1    165\n0    138\nName: count, dtype: int64\n\n\n\nsns.countplot(x=\"target\", data=df, palette=\"bwr\")\nplt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_5384\\2218517508.py:1: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.countplot(x=\"target\", data=df, palette=\"bwr\")\n\n\n\n\n\n\ncountNoDisease = len(df[df.target == 0])\ncountHaveDisease = len(df[df.target == 1])\nprint(\"Percentage of Patients with no Heart Disease: {:.2f}%\".format((countNoDisease / (len(df.target))*100)))\nprint(\"Percentage of Patients with Heart Disease: {:.2f}%\".format((countHaveDisease / (len(df.target))*100)))\n\nPercentage of Patients with no Heart Disease: 45.54%\nPercentage of Patients with Heart Disease: 54.46%\n\n\n\ncountFemale = len(df[df.sex == 0])\ncountMale = len(df[df.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale / (len(df.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale / (len(df.sex))*100)))\n\nPercentage of Female Patients: 31.68%\nPercentage of Male Patients: 68.32%\n\n\n\nsns.countplot(x='sex', data=df, palette=\"mako_r\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_5384\\1879341537.py:1: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.countplot(x='sex', data=df, palette=\"mako_r\")\n\n\n\n\n\n\n\nNormalization of Data\nThis segment isolates the target variable from the predictors, normalizes the predictor data, divides the data into training and testing sets, and transposes the matrices to align with the specifications of the KNN model. We will partition our dataset, allocating 80% for training data and reserving 20% for testing purposes.\n\ny = df.target.values\nx_data = df.drop(['target'], axis = 1)\nx = (x_data - np.min(x_data)) / (np.max(x_data) - np.min(x_data))\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T\n\nIn this portion, the code imports the KNeighborsClassifier from the sklearn library, initializes it with a parameter n_neighbors (k) set to 2, fits the model to the training data, generates predictions on the test data, and subsequently prints the accuracy of the model.\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)  # n_neighbors means k\nknn.fit(x_train.T, y_train.T)\nprediction = knn.predict(x_test.T)\nprint(\"{} NN Score: {:.2f}%\".format(2, knn.score(x_test.T, y_test.T)*100))\n\n2 NN Score: 60.66%\n\n\nThis segment executes a loop across values of k ranging from 1 to 20. For each iteration, it fits a KNN model, records the accuracy of each model in the “score list”, and subsequently plots the accuracies against the corresponding k values. The code identifies the maximum accuracy, stores it in “accuracies[‘KNN’]”, and prints this maximum accuracy. This process aids in pinpointing the optimal k value that yields the highest accuracy.\n\naccuracies = {}\nscoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(x_train.T, y_train.T)\n    scoreList.append(knn2.score(x_test.T, y_test.T))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\nacc = max(scoreList)*100\naccuracies['KNN'] = acc\nprint(\"Maximum KNN Score is {:.2f}%\".format(acc))\n\n\n\n\nMaximum KNN Score is 72.13%\n\n\n\n\nConclusion\nThe KNN model classification has been executed with an accuracy of 72.13%."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am Amal Sujith (ID: 906578048) student of MS in Computer Engineering. I’m currently working on Machine Learning and improving my problem solving skills.\nContact: Email: amalsmenon7@gmail.com Phone No: +918281725367"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to The World of Machine Learning (CS5805)",
    "section": "",
    "text": "Heart Disease Classification and Prediction using KNN Model\n\n\n\n\n\n\n\n\n\n\n\n\nOct 13, 2023\n\n\n\n\n\n\nNo matching items"
  }
]